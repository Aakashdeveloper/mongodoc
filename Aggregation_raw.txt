db.products.insert({'name':'iPad 16GB Wifi', 'manufacturer':"Apple", 
		    'category':'Tablets', 
		    'price':499.00})
db.products.insert({'name':'iPad 32GB Wifi', 'category':'Tablets', 
		    'manufacturer':"Apple", 
		    'price':599.00})
db.products.insert({'name':'iPad 64GB Wifi', 'category':'Tablets', 
		    'manufacturer':"Apple", 
		    'price':699.00})
db.products.insert({'name':'Galaxy S3', 'category':'Cell Phones', 
		    'manufacturer':'Samsung',
		    'price':563.99})
db.products.insert({'name':'Galaxy Tab 10', 'category':'Tablets', 
		    'manufacturer':'Samsung',
		    'price':450.99})
db.products.insert({'name':'Vaio', 'category':'Laptops', 
		    'manufacturer':"Sony", 
		    'price':499.00})
db.products.insert({'name':'Macbook Air 13inch', 'category':'Laptops', 
		    'manufacturer':"Apple", 
		    'price':499.00})
db.products.insert({'name':'Nexus 7', 'category':'Tablets', 
		    'manufacturer':"Google", 
		    'price':199.00})
db.products.insert({'name':'Kindle Paper White', 'category':'Tablets', 
		    'manufacturer':"Amazon", 
		    'price':129.00})
db.products.insert({'name':'Kindle Fire', 'category':'Tablets', 
		    'manufacturer':"Amazon", 
		    'price':199.00})

/****First aggregate Querry****Count of each manufacturer********/
db.products.aggregate([
        {$group:
          {
             _id:"$manufacturer",
             num_products:{$sum:1}
           }
         }
])



/***Agrregation Pipeline******************/

Collection->$project->$match->$group->$sort->Result


$project:  reshape the document
$match: Filter step
$group: aggregate(sum, avg,count etc)
$sort: sorting the document
$skip:  Skip documents
$limit: limit number of document 
$unwind: Normalize tag  /*
       tags;["red","blue","green"]
        tag:"red",
        tag:"blue",
        tag:"green"  */

$out: output 


/***************Count of manufacturer with category/


db.products.aggregate([
        {$group:
          {
             _id:{ "manufacturer":"$manufacturer",
                   "category":"$category"
                  },
             num_products:{$sum:1}
           }
         }
])

/*** Id can have values***************/

db.foo.insert({_id:{name:"aakash",class:"7module"}, hometown:"IND"})

/****using sum operator **********/

db.products.aggregate([
        {$group:
          {
             _id:{"manufacturer":"$manufacturer"},
             total_price:{$sum:"$price"}
           }
         }
])

/****Using avg function  ****************/

db.products.aggregate([
        {$group:
          {
             _id:{"manufacturer":"$manufacturer"},
             avg_price:{$avg:"$price"}
           }
         }
])

/****Addto set ****************/
db.products.aggregate([
        {$group:
          {
             _id:{"manufacturer":"$manufacturer"},
             categories:{$addToSet:"$category"}
           }
         }
])

/***********Push function **************/
db.products.aggregate([
        {$group:
          {
             _id:{"manufacturer":"$manufacturer"},
             categories:{$push:"$category"}
           }
         }
])


/***********Max function **************/
db.products.aggregate([
        {$group:
          {
             _id:{"manufacturer":"$manufacturer"},
             maxPrice:{$max:"$price"}
           }
         }
]) 

/**Double group***************/
db.grades.aggregate([
    {'$group':{_id:{class_id:"$class_id", student_id:"$student_id"}, 'average':{"$avg":"$score"}}},
    {'$group':{_id:"$_id.class_id", 'average':{"$avg":"$average"}}}])


/**********$project **********************/
db.products.aggregate([
        {$project:
           {
              _id:1,
              'maker':{$toLower: "$manufacturer"},
              'details':{'category':"$category",
                          'price':{"$multiply":["$price",10]}
                         },
               'item':'$name'
            }
         }
])


 db.city.count({city:"CHICOPEE"})
db.city.distinct("state")
 db.city.distinct("city").length
/***********$match****************/
db.city.aggregate([
    {$match:
      {
         state:"CA"
      }
    }

])


/**************$match with $group********/
db.city.aggregate([
    {$match:
      {
         state:"CA"
      }
    },
    {$group:
      {
        _id: "$city",
        population: {$sum: "$pop"},
        zip_codes: {$addToSet: "$_id"}
      }
    }
])
       
/**************$match with $group and $project********/

db.city.aggregate([
    {$match:
      {
         state:"CA"
      }
    },
    {$group:
      {
        _id: "$city",
        population: {$sum: "$pop"},
        zip_codes: {$addToSet: "$_id"}
      }
    },
     {$project:
      {
        _id: 0,
        city: "$_id",
        population: 1,
        zip_codes: 1
      }
    }

])


/**************$match with $group and $project add sort to this********/

db.city.aggregate([
    {$match:
      {
         state:"CA"
      }
    },
    {$group:
      {
        _id: "$city",
        population: {$sum: "$pop"},
        zip_codes: {$addToSet: "$_id"}
      }
    },
     {$project:
      {
        _id: 0,
        city: "$_id",
        population: 1,
        zip_codes: 1
      }
    },
     {$sort:
      {
        population: 1
      }
    },
    {$skip: 10},
    {$limit: 5}

])

/*********************Map reduce *************************/
db.collection.mapReduce(
                        function(){emit(key,value)},
                        function(key, values){return reduceFunction},
                            { out: collection,
                              query:document,
                               sort: document,
                              limit:number
                             }
                           )


db.books.insert({name:"JAVA", pages:100});

db.books.insert({name:"XML", pages:400});

db.books.insert({name:"JSON", pages:300});

db.books.insert({name:"AngularJs", pages:250});

db.books.insert({name:"NodeJS", pages:150});

maps: Is a javascript function that aps a value with a key and emits a key-value pair
reduce: is a javascript function that reduces or groups all the documents having same key
out: specifies the locations of the map- reduce query results
query: specifies the optional selection criteria for the selecting documents

/*Lets process this lib collections in a way that we need to find the number
of books having pages less 250 pages and greater 250*/

var map = function(){
var category;
if(this.pages >=250)
  {
    category='Big Books';
  }
else
     category ="small Book";
     emit(category, {name:this.name})
  
};



var reduce = function(key, values){
   var sum = 0;
   values.forEach(function(doc){
   sum += 1;
   });
return {books:sum};
};


var count = db.books.mapReduce(map, reduce, {out: "book_result"});



/*************Order of skip sort and limit************/
$sort -> $skip  -> $limit
